{"version":3,"sources":["Slider.js","Dropdown.js","Toggle.js","LockToggle.js","TextInput.js","LockingSliderGroup.js","Settings.js","Font.js","Shape.js","Glyph.js","App.js","GlyphEditor.js","serviceWorker.js","index.js"],"names":["Slider","props","handleChange","bind","e","this","updateSetting","id","parseFloat","target","value","valueStyle","left","max","className","htmlFor","title","onChange","name","type","min","step","style","React","Component","Dropdown","state","selected","setting","optionItems","options","map","op","key","LockToggle","handleClick","clickHandler","icon","viewBox","d","fill","data-locked","onClick","TextInput","Settings","settings","text","elementShape","elementScaleX","elementScaleY","elementRotation","gridSkew","cellHeight","cellWidth","spacing","font","Shape","shape","transform","position","rotate","cx","width","cy","r","x","y","height","Glyph","rows","cols","elements","g","grids","gridID","gridActive","i","gridRows","x1","y1","x2","gridColumns","y2","push","vectorEffect","positionsList","letters","replace","split","length","row","Math","floor","columns","pos","widthScaled","heightScaled","App","editModeEnabled","padding","smoothing","updateWindowDimensions","window","addEventListener","setState","innerWidth","innerHeight","prevState","console","error","toLowerCase","gridWidth","gridHeight","baseX","baseY","glyphs","currentX","abs","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1aad7686.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Slider.scss';\r\n\r\nexport default class Slider extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.props.updateSetting(this.props.id, parseFloat(e.target.value))\r\n    }\r\n    render() {\r\n        let valueStyle = {\r\n            left: ((this.props.value / this.props.max) * 100) + '%'\r\n        }\r\n        return (\r\n            <div className='setting slider'>\r\n                <label htmlFor={this.props.id}>{this.props.title}</label>\r\n                <div className='slider-track'>\r\n                    <input className='slider-input' onChange={this.handleChange} name={this.props.id} type='range' min={this.props.min} max={this.props.max} step={this.props.step} value={this.props.value}></input>\r\n                    <div style={valueStyle} className='slider-value'>\r\n                        <input className='value-input' onChange={this.handleChange} name={this.props.id} type='number' min={this.props.min} max={this.props.max} step={this.props.step} value={this.props.value}></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Dropdown extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            selected: 0\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        const setting = this.props.id;\r\n        this.props.updateSetting(setting, e.target.value)\r\n    }\r\n    render() {\r\n        const optionItems = this.props.options.map((op) => {\r\n            return (<option key={`op-${op}`} value={op}>{op}</option>)\r\n        })\r\n        return (\r\n            <div className='setting dropdown'>\r\n                <label htmlFor={this.props.id}>{this.props.title}</label>\r\n                <select value={this.props.value} id={this.props.id} onChange={this.handleChange}>\r\n                    {optionItems}\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './css/Toggle.scss'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Toggle extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputRef = React.createRef()\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n    handleChange(e) {\r\n        const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\r\n        this.props.updateSetting(this.props.id, value)\r\n    }\r\n    handleClick(e) {\r\n        this.inputRef.current.click()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='setting toggle'>\r\n                <label htmlFor={this.props.id}>{this.props.title || this.props.id}</label>\r\n                <div data-active={this.props.value} className=\"toggle-body\" onClick={this.handleClick}>\r\n                    <div className=\"toggle-element\"></div>\r\n                </div>\r\n                <input ref={this.inputRef} onChange={this.handleChange} name={this.props.id} type='checkbox' checked={this.props.value}></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nToggle.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.bool.isRequired,\r\n    title: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n}\r\n\r\nexport default Toggle;","import React from 'react'\r\n\r\nexport default class LockToggle extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    handleClick() {\r\n        this.props.clickHandler()\r\n    }\r\n    render() {\r\n        let icon = null;\r\n        if (this.props.value === true) {\r\n            icon =<svg viewBox=\"0 0 24 24\"> <path d=\"M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z\" /></svg>\r\n        } else {\r\n            icon =<svg viewBox=\"0 0 24 24\">   <path fill=\"currentColor\" d=\"M2,5.27L3.28,4L20,20.72L18.73,22L13.9,17.17L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L12.5,15.76L10.88,14.15C10.87,14.39 10.77,14.64 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C8.12,13.77 7.63,12.37 7.72,11L2,5.27M12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.79,8.97L9.38,7.55L12.71,4.22M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.2,10.54 16.61,12.5 16.06,14.23L14.28,12.46C14.23,11.78 13.94,11.11 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z\" /></svg>\r\n        }\r\n        return (\r\n            <button data-locked={this.props.value} onClick={this.handleClick} className='lockToggle'>\r\n                {icon}\r\n            </button>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class TextInput extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.props.updateSetting(this.props.id, e.target.value)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='setting text'>\r\n                <label htmlFor={this.props.id}>{this.props.title}</label>\r\n                <input className='text-input' onChange={this.handleChange} name={this.props.id} type='text' value={this.props.value}></input>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport LockToggle from './LockToggle.js'\r\n\r\nexport default class LockingSliderGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            locked: true,\r\n            controlledSettings: []\r\n        }\r\n        this.updateChildSetting = this.updateChildSetting.bind(this)\r\n        this.handleLockClick = this.handleLockClick.bind(this)\r\n\r\n        React.Children.map(this.props.children, k => {\r\n            this.state.controlledSettings.push(k.props.id)\r\n        })\r\n\r\n\r\n    }\r\n\r\n    handleLockClick(){\r\n        if (this.state.locked === true){\r\n            this.setState({locked: false});\r\n        } else {\r\n            this.setState({locked: true});\r\n        }\r\n    }\r\n\r\n    updateChildSetting(id, value) {\r\n        this.props.updateSetting(id, value)\r\n        if (this.state.locked === true) {\r\n            for (let i = 0; i < this.state.controlledSettings.length; i++) {\r\n                let cs = this.state.controlledSettings[i];\r\n                console.log(id)\r\n                console.log(cs)\r\n                if (cs !== id) { //avoid loop\r\n                    this.props.updateSetting(cs, value)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let kidsWithProps = React.Children.map(this.props.children, k => {\r\n            return (React.cloneElement(k, { 'updateSetting': this.updateChildSetting }))\r\n        })\r\n        return (\r\n            <div className='setting sliderGroup'>\r\n                <span>{this.props.title}<LockToggle clickHandler={this.handleLockClick} value={this.state.locked} /></span>\r\n                {kidsWithProps}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Slider from './Slider.js';\r\nimport Toggle from './Toggle.js';\r\nimport Dropdown from './Dropdown.js';\r\nimport LockingSliderGroup from './LockingSliderGroup.js';\r\nimport TextInput from \"./TextInput.js\"\r\nimport './css/Settings.scss';\r\n\r\n// const equal = require('fast-deep-equal/es6/react');\r\n\r\nexport default class Settings extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='settings'>\r\n                <TextInput updateSetting={this.props.updateSetting} value={this.props.settings.text} title='Text' id='text'></TextInput>\r\n\r\n                <Dropdown updateSetting={this.props.updateSetting} options={['circle', 'rect']} value={this.props.settings.elementShape} id='elementShape' title='Element Shape'></Dropdown>\r\n\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.elementScaleX} title='Element Scale X' id='elementScaleX' min='0.01' max='10' step='.1'></Slider>\r\n\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.elementScaleY} title='Element Scale Y' id='elementScaleY' min='0.01' max='10' step='.1'></Slider>\r\n\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.elementRotation} title='Element Rotation' id='elementRotation' min='0' max='360' step='.1'></Slider>\r\n\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.gridSkew} title='Grid Skew' id='gridSkew' min='-350' max='350' step='.001'></Slider>\r\n\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.cellHeight} title='Cell Height' id='cellHeight' min='5' max='150' step='.001'></Slider>\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.cellWidth} title='Cell Width' id='cellWidth' min='5' max='150' step='.001'></Slider>\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.spacing} title='Spacing' id='spacing' min='-150' max='150' step='.001'></Slider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","const font = {\r\n    \"grids\": {\r\n        \"6x8\": {\r\n            \"columns\": 6,\r\n            \"rows\": 8,\r\n            \"letters\": {\r\n                \"a\": \"011110 100001 100001 100001 111111 100001 100001 100001\",\r\n                \"b\": \"111110 100001 100001 111110 100001 100001 100001 111110\",\r\n                \"c\": \"011111 100000 100000 100000 100000 100000 100000 011111\",\r\n                \"d\": \"111110 100001 100001 100001 100001 100001 100001 111110\",\r\n                \"e\": \"011111 100000 100000 111111 100000 100000 100000 011111\",\r\n                \"f\": \"011111 100000 100000 111111 100000 100000 100000 100000\",\r\n                \"g\": \"011111 100000 100000 100111 100001 100001 100001 011110\",\r\n                \"h\": \"100001 100001 100001 111111 100001 100001 100001 100001\",\r\n                \"i\": \"111110 001000 001000 001000 001000 001000 001000 111110\",\r\n                \"j\": \"100000 100000 100000 100000 100001 100001 100001 011110\",\r\n                \"k\": \"100001 100010 100100 111000 101000 100100 100010 100001\",\r\n                \"l\": \"100000 100000 100000 100000 100000 100000 100000 011111\",\r\n                \"m\": \"100010 110110 101010 100010 100010 100010 100010 100010\",\r\n                \"n\": \"001100 010010 100001 100001 100001 100001 100001 100001\",\r\n                \"o\": \"011110 100001 100001 100001 100001 100001 100001 011110\",\r\n                \"p\": \"011110 100001 100001 100001 111110 100000 100000 100000\",\r\n                \"q\": \"011110 100001 100001 100001 101001 100101 100011 011100\",\r\n                \"r\": \"011110 100001 100001 100001 111110 100100 100010 100001\",\r\n                \"s\": \"011111 100000 100000 011110 000001 000001 000001 111110\",\r\n                \"t\": \"111110 001000 001000 001000 001000 001000 001000 001000\",\r\n                \"u\": \"100001 100001 100001 100001 100001 100001 100001 011110\",\r\n                \"v\": \"100001 100001 100001 100001 100001 100001 010010 001100\",\r\n                \"w\": \"100001 100001 100001 100001 100001 100001 101101 010010\",\r\n                \"x\": \"100001 010010 001100 001100 001100 001100 010010 100001\",\r\n                \"y\": \"100001 100001 100001 100001 111110 100000 100000 011111\",\r\n                \"z\": \"111111 000001 000010 000100 001000 010000 100000 111111\",\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default font;","import React from 'react'\r\n\r\nexport default class Shape extends React.Component {\r\n    render() {\r\n        if (this.props.shape === 'circle') {\r\n            return (\r\n                <g transform={this.props.position}>\r\n                    <g transform={this.props.rotate}>\r\n                        <circle transform={this.props.transform} key={'element-' + this.props.id} className='element' cx={this.props.width / 2} cy={this.props.width / 2} r={this.props.width}></circle>\r\n                    </g>\r\n                </g>\r\n            )\r\n        } else if (this.props.shape === 'rect') {\r\n            return (\r\n                <g transform={this.props.position}>\r\n                    <g transform={this.props.rotate}>\r\n                        <rect transform={this.props.transform} key={'element-' + this.props.id} className='element' x={0} y={0} width={this.props.width} height={this.props.height}></rect>\r\n                    </g>\r\n                </g>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport font from './Font';\r\nimport Shape from './Shape';\r\n\r\nconst defaultSize = 30;\r\n\r\nexport default class Glyph extends React.Component {\r\n    render() {\r\n        const rows = []\r\n        const cols = []\r\n        const elements = []\r\n        let g = font.grids[this.props.settings.gridID];\r\n        if (this.props.settings.gridActive) {\r\n            // Draw Rows\r\n            for (let i = 0; i < this.props.settings.gridRows; i++) {\r\n                let x1 = (this.props.settings.gridSkew / (this.props.settings.gridRows - 1)) * i + this.props.x;\r\n                let y1 = i * this.props.settings.cellHeight + this.props.y;\r\n                let x2 = ((this.props.settings.gridColumns - 1) * this.props.settings.cellWidth) + ((this.props.settings.gridSkew) / (this.props.settings.gridRows - 1) * i) + this.props.x;\r\n                let y2 = i * this.props.settings.cellHeight + this.props.y;\r\n                rows.push(<line vectorEffect=\"non-scaling-stroke\" key={'row-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n            }\r\n\r\n            // Draw Columns\r\n            for (let i = 0; i < this.props.settings.gridColumns; i++) {\r\n                let x1 = i * this.props.settings.cellWidth + this.props.x;\r\n                let y1 = this.props.y;\r\n                let x2 = i * this.props.settings.cellWidth + this.props.x + parseFloat(this.props.settings.gridSkew);\r\n                let y2 = ((this.props.settings.gridRows - 1) * this.props.settings.cellHeight) + this.props.y;\r\n                cols.push(<line vectorEffect=\"non-scaling-stroke\" key={'col-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n            }\r\n        }\r\n        const positionsList = g.letters[this.props.g].replace(/ /g, '').split('');\r\n        for (let i = 0; i < positionsList.length; i++) {\r\n            let row = Math.floor(i / g.columns);\r\n            const pos = [(i - row * g.columns), row]\r\n            let widthScaled = defaultSize * this.props.settings.elementScaleX;\r\n            let heightScaled = defaultSize * this.props.settings.elementScaleY;\r\n            let gridPointX = (pos[0] * this.props.settings.cellWidth) + (this.props.settings.gridSkew / (this.props.settings.gridRows - 1) * pos[1]) + this.props.x;\r\n            let x = (gridPointX / this.props.settings.elementScaleX);\r\n            let y = ((pos[1] * this.props.settings.cellHeight) + this.props.y) / this.props.settings.elementScaleY;\r\n\r\n            let rotate = `rotate(${this.props.settings.elementRotation}, ${x * this.props.settings.elementScaleX}, ${y * this.props.settings.elementScaleY})`;\r\n            let transform = `translate(${-widthScaled / 2} ${-heightScaled / 2}) scale(${this.props.settings.elementScaleX} ${this.props.settings.elementScaleY}) translate(${x} ${y})`;\r\n\r\n            if (positionsList[i] === \"1\") {\r\n                elements.push(\r\n                    <Shape key={`shape-${i}`} shape={this.props.settings.elementShape} rotate={rotate} transform={transform} width={defaultSize} height={defaultSize} id={i}></Shape>\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <g>\r\n                {elements}\r\n                {rows}\r\n                {cols}\r\n            </g>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Settings from './Settings';\nimport Glyph from './Glyph';\nimport GlyphEditor from './GlyphEditor';\nimport Toggle from './Toggle';\nimport font from \"./Font\"\n\nconst defaultSize = 30;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      width: 0,\n      height: 0,\n      editModeEnabled: false,\n      settings: {\n        gridID: \"6x8\",\n        gridColumns: 6,\n        gridRows: 8,\n        gridSkew: 12,\n        gridActive: true,\n        padding: 100,\n        elementScaleX: 1.5,\n        elementScaleY: 1.5,\n        elementRotation: 20,\n        elementShape: 'circle',\n        smoothing: 20,\n        cellWidth: 30,\n        cellHeight: 40,\n        smoothing: 10,\n        spacing: 17,\n        text: \"Space\"\n      }\n\n    }\n    this.updateSetting = this.updateSetting.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions()\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  updateSetting(setting, value) {\n    this.setState((prevState) => {\n      if (prevState.settings[setting] !== null) {\n        prevState.settings[setting] = value;\n      } else {\n        console.error(`Attempted to update non-existing setting ${setting}`)\n      }\n      return prevState;\n    })\n  }\n\n  render() {\n    const letters = this.state.settings.text.toLowerCase().split('');\n    const gridWidth = this.state.settings.gridColumns * this.state.settings.cellWidth + defaultSize * this.state.settings.elementScaleX + this.state.settings.spacing;\n    const gridHeight = this.state.settings.gridRows * this.state.settings.cellHeight;\n    let baseX = (this.state.width / 2) - ((gridWidth / 2) * letters.length);\n    let baseY = (this.state.height / 2) - (gridHeight / 2)\n\n    const glyphs = letters.map((g, i) => {\n      if (font.grids[this.state.settings.gridID].letters[g]) {\n        let currentX = baseX + gridWidth * i\n        return (\n          <Glyph key={`glyph-${i}`} settings={this.state.settings} g={g} y={baseY} x={currentX}></Glyph>\n        )\n      }\n    })\n\n\n    const containerWidth = (this.state.settings.gridColumns - 1) * this.state.settings.cellWidth + Math.abs(this.state.settings.gridSkew) + (defaultSize * this.state.settings.elementScaleX * 4)\n    const containerHeight = this.state.settings.gridRows * this.state.settings.cellHeight + (defaultSize * this.state.settings.elementScaleY * 2)\n    return (\n      <div>\n        <svg className='testPreview' width={this.state.width} height={this.state.height}>{glyphs}</svg>\n        <Settings updateSetting={this.updateSetting} settings={this.state.settings}></Settings>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react'\r\nimport design from './design';\r\nimport './css/editor.scss';\r\n\r\nconst testGrid = '3x4'\r\n\r\nclass GlyphEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.defaultAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxzy1234567890-=+@£$%&()';\r\n        this.state = {\r\n            design: design,\r\n            currentGlyph: 'A',\r\n            existingGlyphs: design.grids[testGrid].letters\r\n        }\r\n        this.handleGlyphClick = this.handleGlyphClick.bind(this)\r\n        this.togglePosition = this.togglePosition.bind(this)\r\n    }\r\n\r\n    handleGlyphClick(e) {\r\n        let g = e.target.getAttribute('data-g');\r\n        this.setState((prevState) => {\r\n            prevState.currentGlyph = g;\r\n            if (!prevState.design.grids[testGrid].letters[g]) {\r\n                let emptyGlyph = new Array(prevState.design.grids[testGrid].rows * prevState.design.grids[testGrid].columns).fill(0)\r\n                prevState.design.grids[testGrid].letters[g] = emptyGlyph.join('')\r\n            }\r\n            return prevState;\r\n        })\r\n    }\r\n    updateJSON() {\r\n        design.grids[testGrid].letters[this.state.currentGlyph] = this.state.activePositions\r\n    }\r\n\r\n    togglePosition(e) {\r\n        // We can store active positions as a binary string! much more efficient than 2d array of active positions (that was better for hand authoring)\r\n        let arr = this.state.design.grids[testGrid].letters[this.state.currentGlyph].split('')\r\n        console.log(arr)\r\n        let i = e.target.getAttribute('data-i');\r\n        if (arr[i] === \"1\") {\r\n            arr[i] = \"0\"\r\n        } else {\r\n            arr[i] = \"1\"\r\n        }\r\n        this.setState((prevState) => {\r\n            prevState.design.grids[testGrid].letters[this.state.currentGlyph] = arr.join('')\r\n            return prevState\r\n        })\r\n        this.updateJSON()\r\n    }\r\n\r\n    render() {\r\n        const rows = []\r\n        const cols = []\r\n        const toggles = []\r\n        const p = 100;\r\n        const s = 200;\r\n        const rowCount = design.grids[testGrid].rows;\r\n        const colCount = design.grids[testGrid].columns;\r\n\r\n        for (let i = 0; i < rowCount; i++) {\r\n            let x1 = p;\r\n            let y1 = p + i * s;\r\n            let x2 = p + (colCount - 1) * s;\r\n            let y2 = y1;\r\n            rows.push(<line vectorEffect=\"non-scaling-stroke\" key={'row-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n        }\r\n\r\n        for (let i = 0; i < colCount; i++) {\r\n            let x1 = p + i * s;\r\n            let y1 = p;\r\n            let x2 = x1;\r\n            let y2 = (p + (rowCount - 1) * s);\r\n            cols.push(<line vectorEffect=\"non-scaling-stroke\" key={'col-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n        }\r\n\r\n        let currentCol = 0;\r\n        let currentRow = 0;\r\n        for (let i = 0; i < (colCount * (rowCount)); i++) {\r\n            if (currentCol > colCount - 1) {\r\n                currentCol = 0;\r\n                currentRow++;\r\n            }\r\n            let x = p + currentCol * s;\r\n            let y = p + currentRow * s;\r\n            toggles.push(<circle data-active={this.state.design.grids[testGrid].letters[this.state.currentGlyph].split('')[i]} data-i={i} onClick={this.togglePosition} r={.4 * s} cx={x} cy={y}></circle>)\r\n            currentCol++;\r\n        }\r\n\r\n        let glyphItems = this.defaultAlphabet.split('').map((g) => {\r\n            return (\r\n                <li data-active={g === this.state.currentGlyph} className='editor-glyph'>\r\n                    <button data-g={g} onClick={this.handleGlyphClick}>\r\n                        {g}\r\n                    </button>\r\n                </li>)\r\n        })\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                <svg width={this.props.width} height={this.props.height} className=\"editor-preview\">\r\n                    {toggles}\r\n                    {rows}\r\n                    {cols}\r\n                </svg>\r\n                <ul className='editor-glyphs'>\r\n                    {glyphItems}\r\n                </ul>\r\n                <div className=\"editor-json\">\r\n                    {JSON.stringify(design)}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GlyphEditor;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}