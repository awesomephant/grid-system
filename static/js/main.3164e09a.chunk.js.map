{"version":3,"sources":["Slider.js","Toggle.js","Dropdown.js","LockToggle.js","LockingSliderGroup.js","Settings.js","Shape.js","Glyph.js","GlyphEditor.js","App.js","serviceWorker.js","index.js"],"names":["Slider","props","handleChange","bind","e","this","updateSetting","id","target","value","valueStyle","left","max","className","htmlFor","title","onChange","name","type","min","step","style","React","Component","Toggle","inputRef","createRef","handleClick","checked","current","click","data-active","onClick","ref","ImageToggle","state","selected","setting","optionItems","options","map","op","key","LockToggle","clickHandler","icon","viewBox","d","fill","data-locked","LockingSliderGroup","locked","controlledSettings","updateChildSetting","handleLockClick","Children","children","k","push","setState","i","length","cs","console","log","kidsWithProps","cloneElement","Settings","settings","elementShape","globalScaleX","globalScaleY","elementScaleX","elementScaleY","elementRotation","gridSkew","gridActive","Shape","shape","transform","position","rotate","cx","width","cy","r","x","y","height","Glyph","rows","cols","elements","g","design","grids","gridID","s","glyphScale","gridRows","x1","y1","x2","gridColumns","y2","vectorEffect","positionsList","letters","replace","split","row","Math","floor","columns","pos","widthScaled","heightScaled","globalTransfrom","GlyphEditor","defaultAlphabet","currentGlyph","existingGlyphs","handleGlyphClick","togglePosition","getAttribute","prevState","emptyGlyph","Array","join","activePositions","arr","updateJSON","toggles","p","rowCount","colCount","currentCol","currentRow","data-i","glyphItems","data-g","JSON","stringify","App","editModeEnabled","padding","smoothing","updateWindowDimensions","handleModeSwitch","window","addEventListener","innerWidth","innerHeight","error","currentX","glyphs","mainContent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"62BAGqBA,G,kBACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,0EAINC,GACTC,KAAKJ,MAAMK,cAAcD,KAAKJ,MAAMM,GAAIH,EAAEI,OAAOC,S,+BAGjD,IAAIC,EAAa,CACbC,KAAQN,KAAKJ,MAAMQ,MAAQJ,KAAKJ,MAAMW,IAAO,IAAO,KAExD,OACI,yBAAKC,UAAU,kBACX,2BAAOC,QAAST,KAAKJ,MAAMM,IAAKF,KAAKJ,MAAMc,OAC3C,yBAAKF,UAAU,gBACX,2BAAOA,UAAU,eAAeG,SAAUX,KAAKH,aAAce,KAAMZ,KAAKJ,MAAMM,GAAIW,KAAK,QAAQC,IAAKd,KAAKJ,MAAMkB,IAAKP,IAAKP,KAAKJ,MAAMW,IAAKQ,KAAMf,KAAKJ,MAAMmB,KAAMX,MAAOJ,KAAKJ,MAAMQ,QAClL,yBAAKY,MAAOX,EAAYG,UAAU,gBAC9B,2BAAOA,UAAU,cAAcG,SAAUX,KAAKH,aAAce,KAAMZ,KAAKJ,MAAMM,GAAIW,KAAK,SAASC,IAAKd,KAAKJ,MAAMkB,IAAKP,IAAKP,KAAKJ,MAAMW,IAAKQ,KAAMf,KAAKJ,MAAMmB,KAAMX,MAAOJ,KAAKJ,MAAMQ,e,GAlBtKa,IAAMC,YCmC3BC,G,kBAjCX,WAAYvB,GAAQ,IAAD,8BACf,4CAAMA,KACDwB,SAAWH,IAAMI,YACtB,EAAKC,YAAc,EAAKA,YAAYxB,KAAjB,gBACnB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBAJL,E,0EAMNC,GACT,IAAMK,EAA0B,aAAlBL,EAAEI,OAAOU,KAAsBd,EAAEI,OAAOoB,QAAUxB,EAAEI,OAAOC,MACzEJ,KAAKJ,MAAMK,cAAcD,KAAKJ,MAAMM,GAAIE,K,kCAEhCL,GACRC,KAAKoB,SAASI,QAAQC,U,+BAGtB,OACI,yBAAKjB,UAAU,kBACX,2BAAOC,QAAST,KAAKJ,MAAMM,IAAKF,KAAKJ,MAAMc,OAASV,KAAKJ,MAAMM,IAC/D,yBAAKwB,cAAa1B,KAAKJ,MAAMQ,MAAOI,UAAU,cAAcmB,QAAS3B,KAAKsB,aACtE,yBAAKd,UAAU,oBAEnB,2BAAOoB,IAAK5B,KAAKoB,SAAUT,SAAUX,KAAKH,aAAce,KAAMZ,KAAKJ,MAAMM,GAAIW,KAAK,WAAWU,QAASvB,KAAKJ,MAAMQ,a,GArB5Ga,IAAMC,YCFNW,E,YACjB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,SAAU,GAEd,EAAKlC,aAAe,EAAKA,aAAaC,KAAlB,gBALV,E,0EAODC,GACT,IAAMiC,EAAUhC,KAAKJ,MAAMM,GAC3BF,KAAKJ,MAAMK,cAAc+B,EAASjC,EAAEI,OAAOC,S,+BAG3C,IAAM6B,EAAcjC,KAAKJ,MAAMsC,QAAQC,KAAI,SAACC,GACxC,OAAQ,4BAAQC,IAAG,aAAQD,GAAMhC,MAAOgC,GAAKA,MAEjD,OACI,yBAAK5B,UAAU,oBACX,2BAAOC,QAAST,KAAKJ,MAAMM,IAAKF,KAAKJ,MAAMc,OAC3C,4BAAQN,MAAOJ,KAAKJ,MAAMQ,MAAOF,GAAIF,KAAKJ,MAAMM,GAAIS,SAAUX,KAAKH,cAC9DoC,Q,GApBoBhB,IAAMC,WCA1BoB,E,YACjB,WAAY1C,GAAQ,IAAD,8BACf,4CAAMA,KACD0B,YAAc,EAAKA,YAAYxB,KAAjB,gBAFJ,E,2EAKfE,KAAKJ,MAAM2C,iB,+BAGX,IAAIC,EAAO,KAMX,OAJIA,GADqB,IAArBxC,KAAKJ,MAAMQ,MACL,yBAAKqC,QAAQ,aAAb,IAA0B,0BAAMC,EAAE,ktBAElC,yBAAKD,QAAQ,aAAb,MAA4B,0BAAME,KAAK,eAAeD,EAAE,2vBAG9D,4BAAQE,cAAa5C,KAAKJ,MAAMQ,MAAOuB,QAAS3B,KAAKsB,YAAad,UAAU,cACvEgC,O,GAjBuBvB,IAAMC,WCCzB2B,E,YACjB,WAAYjD,GAAQ,IAAD,8BACf,4CAAMA,KACDkC,MAAQ,CACTgB,QAAQ,EACRC,mBAAoB,IAExB,EAAKC,mBAAqB,EAAKA,mBAAmBlD,KAAxB,gBAC1B,EAAKmD,gBAAkB,EAAKA,gBAAgBnD,KAArB,gBAEvBmB,IAAMiC,SAASf,IAAI,EAAKvC,MAAMuD,UAAU,SAAAC,GACpC,EAAKtB,MAAMiB,mBAAmBM,KAAKD,EAAExD,MAAMM,OAVhC,E,gFAiBW,IAAtBF,KAAK8B,MAAMgB,OACX9C,KAAKsD,SAAS,CAACR,QAAQ,IAEvB9C,KAAKsD,SAAS,CAACR,QAAQ,M,yCAIZ5C,EAAIE,GAEnB,GADAJ,KAAKJ,MAAMK,cAAcC,EAAIE,IACH,IAAtBJ,KAAK8B,MAAMgB,OACX,IAAK,IAAIS,EAAI,EAAGA,EAAIvD,KAAK8B,MAAMiB,mBAAmBS,OAAQD,IAAK,CAC3D,IAAIE,EAAKzD,KAAK8B,MAAMiB,mBAAmBQ,GACvCG,QAAQC,IAAIzD,GACZwD,QAAQC,IAAIF,GACRA,IAAOvD,GACPF,KAAKJ,MAAMK,cAAcwD,EAAIrD,M,+BAMnC,IAAD,OACDwD,EAAgB3C,IAAMiC,SAASf,IAAInC,KAAKJ,MAAMuD,UAAU,SAAAC,GACxD,OAAQnC,IAAM4C,aAAaT,EAAG,CAAE,cAAiB,EAAKJ,wBAE1D,OACI,yBAAKxC,UAAU,uBACX,8BAAOR,KAAKJ,MAAMc,MAAM,kBAAC,EAAD,CAAY6B,aAAcvC,KAAKiD,gBAAiB7C,MAAOJ,KAAK8B,MAAMgB,UACzFc,O,GA9C+B3C,IAAMC,WCMjC4C,G,uLAEb,OACI,yBAAKtD,UAAU,YACX,kBAAC,EAAD,CAAUP,cAAeD,KAAKJ,MAAMK,cAAeiC,QAAS,CAAC,SAAU,QAAS9B,MAAOJ,KAAKJ,MAAMmE,SAASC,aAAc9D,GAAG,eAAeQ,MAAM,kBACjJ,kBAAC,EAAD,CAAoBT,cAAeD,KAAKJ,MAAMK,cAAeS,MAAM,gBAC/D,kBAAC,EAAD,CAAQN,MAAOJ,KAAKJ,MAAMmE,SAASE,aAAcvD,MAAM,IAAIR,GAAG,eAAeY,IAAI,OAAOP,IAAI,KAAKQ,KAAK,OACtG,kBAAC,EAAD,CAAQX,MAAOJ,KAAKJ,MAAMmE,SAASG,aAAcxD,MAAM,IAAIR,GAAG,eAAeY,IAAI,OAAOP,IAAI,KAAKQ,KAAK,QAE1G,kBAAC,EAAD,CAAoBd,cAAeD,KAAKJ,MAAMK,cAAeS,MAAM,iBAC/D,kBAAC,EAAD,CAAQN,MAAOJ,KAAKJ,MAAMmE,SAASI,cAAezD,MAAM,IAAIR,GAAG,gBAAgBY,IAAI,OAAOP,IAAI,KAAKQ,KAAK,OACxG,kBAAC,EAAD,CAAQX,MAAOJ,KAAKJ,MAAMmE,SAASK,cAAe1D,MAAM,IAAIR,GAAG,gBAAgBY,IAAI,OAAOP,IAAI,KAAKQ,KAAK,QAE5G,kBAAC,EAAD,CAAQd,cAAeD,KAAKJ,MAAMK,cAAeG,MAAOJ,KAAKJ,MAAMmE,SAASM,gBAAiB3D,MAAM,mBAAmBR,GAAG,kBAAkBY,IAAI,IAAIP,IAAI,MAAMQ,KAAK,OAClK,kBAAC,EAAD,CAAQd,cAAeD,KAAKJ,MAAMK,cAAeG,MAAOJ,KAAKJ,MAAMmE,SAASO,SAAU5D,MAAM,YAAYR,GAAG,WAAWY,IAAI,KAAKP,IAAI,IAAIQ,KAAK,SAC5I,kBAAC,EAAD,CAAQX,MAAOJ,KAAKJ,MAAMmE,SAASQ,WAAYrE,GAAG,aAAaD,cAAeD,KAAKJ,MAAMK,cAAeS,MAAM,qB,GAfxFO,IAAMC,Y,OCPvBsD,E,iLAEb,MAAyB,WAArBxE,KAAKJ,MAAM6E,MAEP,uBAAGC,UAAW1E,KAAKJ,MAAM+E,UACrB,uBAAGD,UAAW1E,KAAKJ,MAAMgF,QACrB,4BAAQF,UAAW1E,KAAKJ,MAAM8E,UAAWrC,IAAK,WAAarC,KAAKJ,MAAMM,GAAIM,UAAU,UAAUqE,GAAI7E,KAAKJ,MAAMkF,MAAQ,EAAGC,GAAI/E,KAAKJ,MAAMkF,MAAQ,EAAGE,EAAGhF,KAAKJ,MAAMkF,UAIhJ,SAArB9E,KAAKJ,MAAM6E,MAEd,uBAAGC,UAAW1E,KAAKJ,MAAM+E,UACrB,uBAAGD,UAAW1E,KAAKJ,MAAMgF,QACrB,0BAAMF,UAAW1E,KAAKJ,MAAM8E,UAAWrC,IAAK,WAAarC,KAAKJ,MAAMM,GAAIM,UAAU,UAAUyE,EAAG,EAAGC,EAAG,EAAGJ,MAAO9E,KAAKJ,MAAMkF,MAAOK,OAAQnF,KAAKJ,MAAMuF,gBAJ7J,M,GAVoBlE,IAAMC,WCEpBkE,E,iLAEb,IAAMC,EAAO,GACPC,EAAO,GACPC,EAAW,GACbC,EAAIC,EAAOC,MAAM1F,KAAKJ,MAAMmE,SAAS4B,QAErCC,EAAI5F,KAAKJ,MAAMiG,WAGnB,GAAI7F,KAAKJ,MAAMmE,SAASQ,WAAY,CAChC,IAAK,IAAIhB,EAAI,EAAGA,EAAIvD,KAAKJ,MAAMmE,SAAS+B,SAAUvC,IAAK,CACnD,IAAIwC,EAJJ,EAIgB/F,KAAKJ,MAAMmE,SAASO,SAAWsB,GAAM5F,KAAKJ,MAAMmE,SAAS+B,SAAW,GAAMvC,EAAKvD,KAAKJ,MAAMqF,EACtGe,EALJ,EAKczC,EAAIqC,EAAK5F,KAAKJ,MAAMsF,EAC9Be,EANJ,GAMejG,KAAKJ,MAAMmE,SAASmC,YAAc,GAAKN,EAAO5F,KAAKJ,MAAMmE,SAASO,SAAWsB,GAAM5F,KAAKJ,MAAMmE,SAAS+B,SAAW,GAAKvC,EAAKvD,KAAKJ,MAAMqF,EAClJkB,EAPJ,EAOc5C,EAAIqC,EAAK5F,KAAKJ,MAAMsF,EAClCG,EAAKhC,KAAK,0BAAM+C,aAAa,qBAAqB/D,IAAK,OAASkB,EAAGwC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIE,GAAIA,KAGnG,IAAK,IAAI5C,EAAI,EAAGA,EAAIvD,KAAKJ,MAAMmE,SAASmC,YAAa3C,IAAK,CACtD,IAAIwC,EAZJ,EAYaxC,EAAIqC,EAAI5F,KAAKJ,MAAMqF,EAC5Be,EAbJ,EAaahG,KAAKJ,MAAMsF,EACpBe,EAdJ,EAcc1C,EAAIqC,EAAK5F,KAAKJ,MAAMmE,SAASO,SAAWsB,EAAI5F,KAAKJ,MAAMqF,EACjEkB,EAfJ,GAeenG,KAAKJ,MAAMmE,SAAS+B,SAAW,GAAKF,EAAK5F,KAAKJ,MAAMsF,EACnEI,EAAKjC,KAAK,0BAAM+C,aAAa,qBAAqB/D,IAAK,OAASkB,EAAGwC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIE,GAAIA,MAIvG,IADA,IAAME,EAAgBb,EAAEc,QAAQtG,KAAKJ,MAAM4F,GAAGe,QAAQ,KAAM,IAAIC,MAAM,IAC7DjD,EAAI,EAAGA,EAAI8C,EAAc7C,OAAQD,IAAK,CAC3C,IAAIkD,EAAMC,KAAKC,MAAMpD,EAAIiC,EAAEoB,SACrBC,EAAM,CAAEtD,EAAIkD,EAAMjB,EAAEoB,QAAUH,GAIhCK,EAFe,GAEc9G,KAAKJ,MAAMmE,SAASI,cACjD4C,EAFgB,GAEe/G,KAAKJ,MAAMmE,SAASK,cAEnDa,GADc4B,EAAI,GAAKjB,EA5BvB,EA4BkC5F,KAAKJ,MAAMmE,SAASO,SAAWsB,EAAK5F,KAAKJ,MAAMmE,SAAS+B,SAAWe,EAAI,IACvF7G,KAAKJ,MAAMmE,SAASI,cACtCe,GAAK2B,EAAI,GAAKjB,EA9Bd,GA8BuB5F,KAAKJ,MAAMmE,SAASK,cAE3CO,EAAQ,oBAAgB3E,KAAKJ,MAAMqF,EAA3B,YAAgCjF,KAAKJ,MAAMsF,EAA3C,KAERN,EAAM,iBAAa5E,KAAKJ,MAAMmE,SAASM,gBAAjC,aAAqDY,EAAIjF,KAAKJ,MAAMmE,SAASI,cAA7E,aAA+Fe,EAAIlF,KAAKJ,MAAMmE,SAASK,cAAvH,KAENM,EAAS,qBAAiBoC,EAAc,EAA/B,aAAqCC,EAAe,EAApD,mBAAgE/G,KAAKJ,MAAMmE,SAASI,cAApF,YAAqGnE,KAAKJ,MAAMmE,SAASK,cAAzH,uBAAqJa,EAArJ,YAA0JC,EAA1J,KAEY,MAArBmB,EAAc9C,IACdgC,EAASlC,KACL,kBAAC,EAAD,CAAOhB,IAAG,gBAAWkB,GAAKkB,MAAOzE,KAAKJ,MAAMmE,SAASC,aAAcY,OAAQA,EAAQF,UAAWA,EAAWC,SAAUA,EAAUG,MAhBlH,GAgBuIK,OAftI,GAe6JjF,GAAIqD,KAKzL,IAAIyD,EAAe,gBAAYhH,KAAKJ,MAAMmE,SAASE,aAAhC,YAAgDjE,KAAKJ,MAAMmE,SAASG,aAApE,KAEnB,OACI,uBAAGQ,UAAWsC,GACTzB,EACAF,EACAC,O,GA3DkBrE,IAAMC,WCkH1B+F,G,kBA/GX,WAAYrH,GAAQ,IAAD,8BACf,4CAAMA,KACDsH,gBAAkB,8EACvB,EAAKpF,MAAQ,CACT2D,OAAQA,EACR0B,aAAc,IACdC,eAAgB3B,EAAOC,MATlB,OASkCY,SAE3C,EAAKe,iBAAmB,EAAKA,iBAAiBvH,KAAtB,gBACxB,EAAKwH,eAAiB,EAAKA,eAAexH,KAApB,gBATP,E,8EAYFC,GACb,IAAIyF,EAAIzF,EAAEI,OAAOoH,aAAa,UAC9BvH,KAAKsD,UAAS,SAACkE,GAEX,GADAA,EAAUL,aAAe3B,GACpBgC,EAAU/B,OAAOC,MAnBjB,OAmBiCY,QAAQd,GAAI,CAC9C,IAAIiC,EAAa,IAAIC,MAAMF,EAAU/B,OAAOC,MApB3C,OAoB2DL,KAAOmC,EAAU/B,OAAOC,MApBnF,OAoBmGkB,SAASjE,KAAK,GAClH6E,EAAU/B,OAAOC,MArBhB,OAqBgCY,QAAQd,GAAKiC,EAAWE,KAAK,IAElE,OAAOH,O,mCAIX/B,EAAOC,MA3BE,OA2BcY,QAAQtG,KAAK8B,MAAMqF,cAAgBnH,KAAK8B,MAAM8F,kB,qCAG1D7H,GAAI,IAAD,OAEV8H,EAAM7H,KAAK8B,MAAM2D,OAAOC,MAhCnB,OAgCmCY,QAAQtG,KAAK8B,MAAMqF,cAAcX,MAAM,IACnF9C,QAAQC,IAAIkE,GACZ,IAAItE,EAAIxD,EAAEI,OAAOoH,aAAa,UACf,MAAXM,EAAItE,GACJsE,EAAItE,GAAK,IAETsE,EAAItE,GAAK,IAEbvD,KAAKsD,UAAS,SAACkE,GAEX,OADAA,EAAU/B,OAAOC,MAzCZ,OAyC4BY,QAAQ,EAAKxE,MAAMqF,cAAgBU,EAAIF,KAAK,IACtEH,KAEXxH,KAAK8H,e,+BAYL,IATM,IAAD,OACCzC,EAAO,GACPC,EAAO,GACPyC,EAAU,GACVC,EAAI,IACJpC,EAAI,IACJqC,EAAWxC,EAAOC,MArDf,OAqD+BL,KAClC6C,EAAWzC,EAAOC,MAtDf,OAsD+BkB,QAE/BrD,EAAI,EAAGA,EAAI0E,EAAU1E,IAAK,CAC/B,IACIyC,EAAKgC,EAAIzE,EAAIqC,EACbK,EAAK+B,GAAKE,EAAW,GAAKtC,EAC1BO,EAAKH,EACTX,EAAKhC,KAAK,0BAAM+C,aAAa,qBAAqB/D,IAAK,OAASkB,EAAGwC,GAJ1DiC,IAIkEhC,GAAIA,EAAIC,GAAIA,EAAIE,GAAIA,KAGnG,IAAK,IAAI5C,EAAI,EAAGA,EAAI2E,EAAU3E,IAAK,CAC/B,IAAIwC,EAAKiC,EAAIzE,EAAIqC,EAEbK,EAAKF,EACLI,EAAM6B,GAAKC,EAAW,GAAKrC,EAC/BN,EAAKjC,KAAK,0BAAM+C,aAAa,qBAAqB/D,IAAK,OAASkB,EAAGwC,GAAIA,EAAIC,GAHlEgC,IAG0E/B,GAAIA,EAAIE,GAAIA,KAKnG,IAFA,IAAIgC,EAAa,EACbC,EAAa,EACR7E,EAAI,EAAGA,EAAK2E,EAAYD,EAAY1E,IAAK,CAC1C4E,EAAaD,EAAW,IACxBC,EAAa,EACbC,KAEJ,IAAInD,EAAI+C,EAAIG,EAAavC,EACrBV,EAAI8C,EAAII,EAAaxC,EACzBmC,EAAQ1E,KAAK,4BAAQ3B,cAAa1B,KAAK8B,MAAM2D,OAAOC,MAjF/C,OAiF+DY,QAAQtG,KAAK8B,MAAMqF,cAAcX,MAAM,IAAIjD,GAAI8E,SAAQ9E,EAAG5B,QAAS3B,KAAKsH,eAAgBtC,EAAG,GAAQH,GAAII,EAAGF,GAAIG,KAClLiD,IAGJ,IAAIG,EAAatI,KAAKkH,gBAAgBV,MAAM,IAAIrE,KAAI,SAACqD,GACjD,OACI,wBAAI9D,cAAa8D,IAAM,EAAK1D,MAAMqF,aAAc3G,UAAU,gBACtD,4BAAQ+H,SAAQ/C,EAAG7D,QAAS,EAAK0F,kBAC5B7B,OAOjB,OACI,oCACI,yBAAKV,MAAO9E,KAAKJ,MAAMkF,MAAOK,OAAQnF,KAAKJ,MAAMuF,OAAQ3E,UAAU,kBAC9DuH,EACA1C,EACAC,GAEL,wBAAI9E,UAAU,iBACT8H,GAEL,yBAAK9H,UAAU,eACVgI,KAAKC,UAAUhD,S,GAzGVxE,IAAMC,YC+FjBwH,E,YA9Fb,WAAY9I,GAAQ,IAAD,8BACjB,4CAAMA,KACDkC,MAAQ,CACXgD,MAAO,EACPK,OAAQ,EACRwD,iBAAiB,EACjB5E,SAAU,CACR4B,OAAQ,MACRO,YAAa,EACbJ,SAAU,EACVxB,SAAU,EACVC,YAAY,EACZqE,QAAS,IACT3E,aAAc,IACdC,aAAc,IACdC,cAAe,GACfC,cAAe,GACfC,gBAAiB,GACjBL,aAAc,SACd6E,UAAW,KAIf,EAAK5I,cAAgB,EAAKA,cAAcH,KAAnB,gBACrB,EAAKgJ,uBAAyB,EAAKA,uBAAuBhJ,KAA5B,gBAC9B,EAAKiJ,iBAAmB,EAAKA,iBAAiBjJ,KAAtB,gBAExBkJ,OAAOC,iBAAiB,SAAU,EAAKH,wBA3BtB,E,iFA+BjB9I,KAAK8I,2B,+CAIL9I,KAAKsD,SAAS,CAAEwB,MAAOkE,OAAOE,WAAY/D,OAAQ6D,OAAOG,gB,yCAIzDnJ,KAAKsD,UAAS,SAACkE,GAMb,OALIA,EAAUmB,gBACZnB,EAAUmB,iBAAkB,EAE5BnB,EAAUmB,iBAAkB,EAEvBnB,O,oCAIGxF,EAAS5B,GACrBJ,KAAKsD,UAAS,SAACkE,GAMb,OALoC,OAAhCA,EAAUzD,SAAS/B,GACrBwF,EAAUzD,SAAS/B,GAAW5B,EAE9BsD,QAAQ0F,MAAR,mDAA0DpH,IAErDwF,O,+BAID,IAAD,OAEH6B,GAAY,IAEVC,EAHO,IAGO9C,MAAM,IAAIrE,KAAI,SAACqD,EAAGjC,GAMpC,OALA8F,GAAY,IAAM,EAAKvH,MAAMiC,SAASE,aACvB,EAAKnC,MAAMgD,MAKxB,kBAAC,EAAD,CAAOzC,IAAG,gBAAWkB,GAAKQ,SAAU,EAAKjC,MAAMiC,SAAUyB,EAAGA,EAAGN,EARpD,IAQiED,EAAGoE,EAAUxD,WAAY,QAIrG0D,EAAc,KAQlB,OANEA,EADEvJ,KAAK8B,MAAM6G,gBACC,kBAAC,EAAD,CAAa7D,MAAO9E,KAAK8B,MAAMgD,MAAOK,OAAQnF,KAAK8B,MAAMqD,SAEzD,oCAAE,yBAAK3E,UAAU,cAAcsE,MAAO9E,KAAK8B,MAAMgD,MAAOK,OAAQnF,KAAK8B,MAAMqD,QAASmE,GAApF,WAAyG,kBAAC,EAAD,CAAUrJ,cAAeD,KAAKC,cAAe8D,SAAU/D,KAAK8B,MAAMiC,YAKzL,oCACE,4BAAQvD,UAAU,cAChB,kBAAC,EAAD,CAAQN,GAAG,kBAAkBQ,MAAM,gBAAgBN,MAAOJ,KAAK8B,MAAM6G,gBAAiB1I,cAAeD,KAAK+I,oBAE3GQ,O,GAzFStI,IAAMC,WCMJsI,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACL1F,QAAQ0F,MAAMA,EAAMmB,c","file":"static/js/main.3164e09a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Slider.scss';\r\n\r\nexport default class Slider extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.props.updateSetting(this.props.id, e.target.value)\r\n    }\r\n    render() {\r\n        let valueStyle = {\r\n            left: ((this.props.value / this.props.max) * 100) + '%'\r\n        }\r\n        return (\r\n            <div className='setting slider'>\r\n                <label htmlFor={this.props.id}>{this.props.title}</label>\r\n                <div className='slider-track'>\r\n                    <input className='slider-input' onChange={this.handleChange} name={this.props.id} type='range' min={this.props.min} max={this.props.max} step={this.props.step} value={this.props.value}></input>\r\n                    <div style={valueStyle} className='slider-value'>\r\n                        <input className='value-input' onChange={this.handleChange} name={this.props.id} type='number' min={this.props.min} max={this.props.max} step={this.props.step} value={this.props.value}></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './css/Toggle.scss'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Toggle extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputRef = React.createRef()\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n    handleChange(e) {\r\n        const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\r\n        this.props.updateSetting(this.props.id, value)\r\n    }\r\n    handleClick(e) {\r\n        this.inputRef.current.click()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='setting toggle'>\r\n                <label htmlFor={this.props.id}>{this.props.title || this.props.id}</label>\r\n                <div data-active={this.props.value} className=\"toggle-body\" onClick={this.handleClick}>\r\n                    <div className=\"toggle-element\"></div>\r\n                </div>\r\n                <input ref={this.inputRef} onChange={this.handleChange} name={this.props.id} type='checkbox' checked={this.props.value}></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nToggle.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.bool.isRequired,\r\n    title: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n}\r\n\r\nexport default Toggle;","import React from 'react';\r\n\r\nexport default class ImageToggle extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            selected: 0\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        const setting = this.props.id;\r\n        this.props.updateSetting(setting, e.target.value)\r\n    }\r\n    render() {\r\n        const optionItems = this.props.options.map((op) => {\r\n            return (<option key={`op-${op}`} value={op}>{op}</option>)\r\n        })\r\n        return (\r\n            <div className='setting dropdown'>\r\n                <label htmlFor={this.props.id}>{this.props.title}</label>\r\n                <select value={this.props.value} id={this.props.id} onChange={this.handleChange}>\r\n                    {optionItems}\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class LockToggle extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    handleClick() {\r\n        this.props.clickHandler()\r\n    }\r\n    render() {\r\n        let icon = null;\r\n        if (this.props.value === true) {\r\n            icon =<svg viewBox=\"0 0 24 24\"> <path d=\"M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z\" /></svg>\r\n        } else {\r\n            icon =<svg viewBox=\"0 0 24 24\">   <path fill=\"currentColor\" d=\"M2,5.27L3.28,4L20,20.72L18.73,22L13.9,17.17L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L12.5,15.76L10.88,14.15C10.87,14.39 10.77,14.64 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C8.12,13.77 7.63,12.37 7.72,11L2,5.27M12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.79,8.97L9.38,7.55L12.71,4.22M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.2,10.54 16.61,12.5 16.06,14.23L14.28,12.46C14.23,11.78 13.94,11.11 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z\" /></svg>\r\n        }\r\n        return (\r\n            <button data-locked={this.props.value} onClick={this.handleClick} className='lockToggle'>\r\n                {icon}\r\n            </button>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport LockToggle from './LockToggle.js'\r\n\r\nexport default class LockingSliderGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            locked: true,\r\n            controlledSettings: []\r\n        }\r\n        this.updateChildSetting = this.updateChildSetting.bind(this)\r\n        this.handleLockClick = this.handleLockClick.bind(this)\r\n\r\n        React.Children.map(this.props.children, k => {\r\n            this.state.controlledSettings.push(k.props.id)\r\n        })\r\n\r\n\r\n    }\r\n\r\n    handleLockClick(){\r\n        if (this.state.locked === true){\r\n            this.setState({locked: false});\r\n        } else {\r\n            this.setState({locked: true});\r\n        }\r\n    }\r\n\r\n    updateChildSetting(id, value) {\r\n        this.props.updateSetting(id, value)\r\n        if (this.state.locked === true) {\r\n            for (let i = 0; i < this.state.controlledSettings.length; i++) {\r\n                let cs = this.state.controlledSettings[i];\r\n                console.log(id)\r\n                console.log(cs)\r\n                if (cs !== id) { //avoid loop\r\n                    this.props.updateSetting(cs, value)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let kidsWithProps = React.Children.map(this.props.children, k => {\r\n            return (React.cloneElement(k, { 'updateSetting': this.updateChildSetting }))\r\n        })\r\n        return (\r\n            <div className='setting sliderGroup'>\r\n                <span>{this.props.title}<LockToggle clickHandler={this.handleLockClick} value={this.state.locked} /></span>\r\n                {kidsWithProps}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Slider from './Slider.js';\r\nimport Toggle from './Toggle.js';\r\nimport Dropdown from './Dropdown.js';\r\nimport LockingSliderGroup from './LockingSliderGroup.js';\r\nimport './css/Settings.scss';\r\n\r\n// const equal = require('fast-deep-equal/es6/react');\r\n\r\nexport default class Settings extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='settings'>\r\n                <Dropdown updateSetting={this.props.updateSetting} options={['circle', 'rect']} value={this.props.settings.elementShape} id='elementShape' title='Element Shape'></Dropdown>\r\n                <LockingSliderGroup updateSetting={this.props.updateSetting} title='Global Scale'>\r\n                    <Slider value={this.props.settings.globalScaleX} title='X' id='globalScaleX' min='0.01' max='10' step='.1'></Slider>\r\n                    <Slider value={this.props.settings.globalScaleY} title='Y' id='globalScaleY' min='0.01' max='10' step='.1'></Slider>\r\n                </LockingSliderGroup>\r\n                <LockingSliderGroup updateSetting={this.props.updateSetting} title='Element Scale'>\r\n                    <Slider value={this.props.settings.elementScaleX} title='X' id='elementScaleX' min='0.01' max='10' step='.1'></Slider>\r\n                    <Slider value={this.props.settings.elementScaleY} title='Y' id='elementScaleY' min='0.01' max='10' step='.1'></Slider>\r\n                </LockingSliderGroup>\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.elementRotation} title='Element Rotation' id='elementRotation' min='0' max='360' step='.1'></Slider>\r\n                <Slider updateSetting={this.props.updateSetting} value={this.props.settings.gridSkew} title='Grid Skew' id='gridSkew' min='-5' max='5' step='.001'></Slider>\r\n                <Toggle value={this.props.settings.gridActive} id='gridActive' updateSetting={this.props.updateSetting} title='Enable Grid'></Toggle>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class Shape extends React.Component {\r\n    render() {\r\n        if (this.props.shape === 'circle') {\r\n            return (\r\n                <g transform={this.props.position}>\r\n                    <g transform={this.props.rotate}>\r\n                        <circle transform={this.props.transform} key={'element-' + this.props.id} className='element' cx={this.props.width / 2} cy={this.props.width / 2} r={this.props.width}></circle>\r\n                    </g>\r\n                </g>\r\n            )\r\n        } else if (this.props.shape === 'rect') {\r\n            return (\r\n                <g transform={this.props.position}>\r\n                    <g transform={this.props.rotate}>\r\n                        <rect transform={this.props.transform} key={'element-' + this.props.id} className='element' x={0} y={0} width={this.props.width} height={this.props.height}></rect>\r\n                    </g>\r\n                </g>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport design from './design';\r\nimport Shape from './Shape';\r\n\r\nexport default class Glyph extends React.Component {\r\n    render() {\r\n        const rows = []\r\n        const cols = []\r\n        const elements = []\r\n        let g = design.grids[this.props.settings.gridID];\r\n\r\n        let s = this.props.glyphScale;\r\n        let p = 0;\r\n\r\n        if (this.props.settings.gridActive) {\r\n            for (let i = 0; i < this.props.settings.gridRows; i++) {\r\n                let x1 = p + (((this.props.settings.gridSkew * s) / (this.props.settings.gridRows - 1)) * i) + this.props.x;\r\n                let y1 = (p + i * s) + this.props.y;\r\n                let x2 = (p + (this.props.settings.gridColumns - 1) * s) + ((this.props.settings.gridSkew * s) / (this.props.settings.gridRows - 1) * i) + this.props.x;\r\n                let y2 = (p + i * s) + this.props.y;\r\n                rows.push(<line vectorEffect=\"non-scaling-stroke\" key={'row-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n            }\r\n\r\n            for (let i = 0; i < this.props.settings.gridColumns; i++) {\r\n                let x1 = p + i * s + this.props.x;\r\n                let y1 = p + this.props.y;\r\n                let x2 = (p + i * s) + this.props.settings.gridSkew * s + this.props.x;\r\n                let y2 = (p + (this.props.settings.gridRows - 1) * s) + this.props.y;\r\n                cols.push(<line vectorEffect=\"non-scaling-stroke\" key={'col-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n            }\r\n        }\r\n        const positionsList = g.letters[this.props.g].replace(/ /g, '').split('');\r\n        for (let i = 0; i < positionsList.length; i++) {\r\n            let row = Math.floor(i / g.columns);\r\n            const pos = [(i - row * g.columns), row]\r\n            \r\n            let defaultWidth = 30;\r\n            let defaultHeight = 30;\r\n            let widthScaled = defaultWidth * this.props.settings.elementScaleX;\r\n            let heightScaled = defaultHeight * this.props.settings.elementScaleY;\r\n            let gridPointX = (pos[0] * s + p) + ((this.props.settings.gridSkew * s) / this.props.settings.gridRows * pos[1]);\r\n            let x = (gridPointX / this.props.settings.elementScaleX);\r\n            let y = (pos[1] * s + p) / this.props.settings.elementScaleY;\r\n\r\n            let position = `translate(${this.props.x} ${this.props.y})`\r\n\r\n            let rotate = `rotate(${this.props.settings.elementRotation}, ${x * this.props.settings.elementScaleX}, ${y * this.props.settings.elementScaleY})`;\r\n\r\n            let transform = `translate(${-widthScaled / 2} ${-heightScaled / 2}) scale(${this.props.settings.elementScaleX} ${this.props.settings.elementScaleY}) translate(${x} ${y})`;\r\n            \r\n            if (positionsList[i] === \"1\") {\r\n                elements.push(\r\n                    <Shape key={`shape-${i}`} shape={this.props.settings.elementShape} rotate={rotate} transform={transform} position={position} width={defaultWidth} height={defaultHeight} id={i}></Shape>\r\n                )\r\n            }\r\n        }\r\n\r\n        let globalTransfrom = `scale(${this.props.settings.globalScaleX} ${this.props.settings.globalScaleY})`;\r\n\r\n        return (\r\n            <g transform={globalTransfrom}>\r\n                {elements}\r\n                {rows}\r\n                {cols}\r\n            </g>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport design from './design';\r\nimport './css/editor.scss';\r\n\r\nconst testGrid = '3x4'\r\n\r\nclass GlyphEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.defaultAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxzy1234567890-=+@£$%&()';\r\n        this.state = {\r\n            design: design,\r\n            currentGlyph: 'A',\r\n            existingGlyphs: design.grids[testGrid].letters\r\n        }\r\n        this.handleGlyphClick = this.handleGlyphClick.bind(this)\r\n        this.togglePosition = this.togglePosition.bind(this)\r\n    }\r\n\r\n    handleGlyphClick(e) {\r\n        let g = e.target.getAttribute('data-g');\r\n        this.setState((prevState) => {\r\n            prevState.currentGlyph = g;\r\n            if (!prevState.design.grids[testGrid].letters[g]) {\r\n                let emptyGlyph = new Array(prevState.design.grids[testGrid].rows * prevState.design.grids[testGrid].columns).fill(0)\r\n                prevState.design.grids[testGrid].letters[g] = emptyGlyph.join('')\r\n            }\r\n            return prevState;\r\n        })\r\n    }\r\n    updateJSON() {\r\n        design.grids[testGrid].letters[this.state.currentGlyph] = this.state.activePositions\r\n    }\r\n\r\n    togglePosition(e) {\r\n        // We can store active positions as a binary string! much more efficient than 2d array of active positions (that was better for hand authoring)\r\n        let arr = this.state.design.grids[testGrid].letters[this.state.currentGlyph].split('')\r\n        console.log(arr)\r\n        let i = e.target.getAttribute('data-i');\r\n        if (arr[i] === \"1\") {\r\n            arr[i] = \"0\"\r\n        } else {\r\n            arr[i] = \"1\"\r\n        }\r\n        this.setState((prevState) => {\r\n            prevState.design.grids[testGrid].letters[this.state.currentGlyph] = arr.join('')\r\n            return prevState\r\n        })\r\n        this.updateJSON()\r\n    }\r\n\r\n    render() {\r\n        const rows = []\r\n        const cols = []\r\n        const toggles = []\r\n        const p = 100;\r\n        const s = 200;\r\n        const rowCount = design.grids[testGrid].rows;\r\n        const colCount = design.grids[testGrid].columns;\r\n\r\n        for (let i = 0; i < rowCount; i++) {\r\n            let x1 = p;\r\n            let y1 = p + i * s;\r\n            let x2 = p + (colCount - 1) * s;\r\n            let y2 = y1;\r\n            rows.push(<line vectorEffect=\"non-scaling-stroke\" key={'row-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n        }\r\n\r\n        for (let i = 0; i < colCount; i++) {\r\n            let x1 = p + i * s;\r\n            let y1 = p;\r\n            let x2 = x1;\r\n            let y2 = (p + (rowCount - 1) * s);\r\n            cols.push(<line vectorEffect=\"non-scaling-stroke\" key={'col-' + i} x1={x1} y1={y1} x2={x2} y2={y2}></line>)\r\n        }\r\n\r\n        let currentCol = 0;\r\n        let currentRow = 0;\r\n        for (let i = 0; i < (colCount * (rowCount)); i++) {\r\n            if (currentCol > colCount - 1) {\r\n                currentCol = 0;\r\n                currentRow++;\r\n            }\r\n            let x = p + currentCol * s;\r\n            let y = p + currentRow * s;\r\n            toggles.push(<circle data-active={this.state.design.grids[testGrid].letters[this.state.currentGlyph].split('')[i]} data-i={i} onClick={this.togglePosition} r={.4 * s} cx={x} cy={y}></circle>)\r\n            currentCol++;\r\n        }\r\n\r\n        let glyphItems = this.defaultAlphabet.split('').map((g) => {\r\n            return (\r\n                <li data-active={g === this.state.currentGlyph} className='editor-glyph'>\r\n                    <button data-g={g} onClick={this.handleGlyphClick}>\r\n                        {g}\r\n                    </button>\r\n                </li>)\r\n        })\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                <svg width={this.props.width} height={this.props.height} className=\"editor-preview\">\r\n                    {toggles}\r\n                    {rows}\r\n                    {cols}\r\n                </svg>\r\n                <ul className='editor-glyphs'>\r\n                    {glyphItems}\r\n                </ul>\r\n                <div className=\"editor-json\">\r\n                    {JSON.stringify(design)}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GlyphEditor;","import React from 'react';\nimport Settings from './Settings';\nimport Glyph from './Glyph';\nimport GlyphEditor from './GlyphEditor';\nimport Toggle from './Toggle';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      width: 0,\n      height: 0,\n      editModeEnabled: false,\n      settings: {\n        gridID: \"6x8\",\n        gridColumns: 6,\n        gridRows: 8,\n        gridSkew: 1,\n        gridActive: true,\n        padding: 100,\n        globalScaleX: 1.5,\n        globalScaleY: 1.5,\n        elementScaleX: .7,\n        elementScaleY: .7,\n        elementRotation: 20,\n        elementShape: 'circle',\n        smoothing: 20,\n      }\n\n    }\n    this.updateSetting = this.updateSetting.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.handleModeSwitch = this.handleModeSwitch.bind(this);\n\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions()\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  handleModeSwitch() {\n    this.setState((prevState) => {\n      if (prevState.editModeEnabled) {\n        prevState.editModeEnabled = false;\n      } else {\n        prevState.editModeEnabled = true;\n      }\n      return prevState\n    })\n  }\n\n  updateSetting(setting, value) {\n    this.setState((prevState) => {\n      if (prevState.settings[setting] !== null) {\n        prevState.settings[setting] = value;\n      } else {\n        console.error(`Attempted to update non-existing setting ${setting}`)\n      }\n      return prevState;\n    })\n  }\n\n  render() {\n    const word = 'A';\n    let currentX = -250;\n    let currentY = 100;\n    const glyphs = word.split('').map((g, i) => {\n      currentX += 350 * this.state.settings.globalScaleX;\n      if (currentX > this.state.width - 350) {\n        //   currentX = 100\n        //        currentY += 400;\n      }\n      return (\n        <Glyph key={`glyph-${i}`} settings={this.state.settings} g={g} y={currentY} x={currentX} glyphScale={40}></Glyph>\n      )\n    })\n\n    let mainContent = null;\n    if (this.state.editModeEnabled) {\n      mainContent = <GlyphEditor width={this.state.width} height={this.state.height}></GlyphEditor>\n    } else {\n      mainContent = <><svg className='testPreview' width={this.state.width} height={this.state.height}>{glyphs}</svg>        <Settings updateSetting={this.updateSetting} settings={this.state.settings}></Settings>\n      </>\n    }\n\n    return (\n      <>\n        <header className=\"app-header\">\n          <Toggle id=\"editModeEnabled\" title='Test / Design' value={this.state.editModeEnabled} updateSetting={this.handleModeSwitch}></Toggle>\n        </header>\n        {mainContent}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}